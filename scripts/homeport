#!/usr/bin/env bash

## Homeport Configuration

# 1. set path to laradock files
LARADOCK="${HOME}/projects/laradock"        # note: must use ${HOME} instead of ~

# 2. set project name
PROJECT="${PWD##*/}"                        # defaults to current folder

# 3. specify database config
DATABASE_NAME="${PROJECT}"                  # defaults to project-name
DATABASE_PASS=secret                        # sync with .env
DATABASE_TYPE=mariadb                       # [mysql, mariadb]

# 4. select containers to run
CONTAINERS="nginx ${DATABASE_TYPE} redis"   # default uses nginx, database and redis

################################################################################
###                       DO NOT MODIFY ANYTHING BELOW                       ###
################################################################################

# Homeport variables
VERSION="1.1.1"
COMPOSE="docker-compose -f docker-compose.yml"
CODE="${PWD}"

# Laradock variables
LD_DBUSER=root
LD_DBPASS=root
LD_NGINX="nginx/sites"

# Run all commands from laradock folder
cd ${LARADOCK}

if [ ${#} -gt 0 ]; then
    # start containers
    if [[ "${1}" == "up" ]] || [[ "${1}" == "start" ]]; then
        ${COMPOSE} up -d ${CONTAINERS}

    # stop containers
    elif [[ "${1}" == "down" ]] || [[ "${1}" == "stop" ]]; then
        ${COMPOSE} down

    ##########################
    ### developer commands ###
    ##########################

    # artisan commands
    elif [[ "${1}" == "art" ]] || [[ "${1}" == "artisan" ]]; then
        shift 1
        COMMAND="php artisan ${@}"
        ${COMPOSE} exec \
            workspace \
            bash -c "cd ${PROJECT}; ${COMMAND}"

    # composer commands
    elif [[ "${1}" == "comp" ]] || [[ "${1}" == "composer" ]]; then
        shift 1
        COMMAND="composer ${@}"
        ${COMPOSE} exec \
            workspace \
            bash -c "cd ${PROJECT}; ${COMMAND}"

    # npm commands
    elif [[ "${1}" == "npm" ]]; then
        shift 1
        echo "Laradock npm is currently not working :-("
        echo "WORKAROUND: run this command:"
        echo "  ./homeport exec workspace bash"
        echo "  cd ${PROJECT}"
        echo "  npm ${@}"
        # COMMAND="npm ${@}"
        # ${COMPOSE} exec \
        #     workspace \
        #     bash -c "cd ${PROJECT}; ${COMMAND}"

    # phpunit commands
    elif [[ "${1}" == "t" ]] || [[ "${1}" == "test" ]]; then
        shift 1
        COMMAND="./vendor/bin/phpunit ${@}"
        ${COMPOSE} exec \
            workspace \
            bash -c "cd ${PROJECT}; ${COMMAND}"

    # redis commands
    elif [[ "${1}" == "redis" ]]; then
        shift 1
        COMMAND="redis-cli ${@}"
        ${COMPOSE} exec \
            redis \
            bash -c "${COMMAND}"

    # sql (mysql/mariadb) commands
    elif [[ "${1}" == "sql" ]]; then
        shift 1
        ${COMPOSE} exec \
            ${DATABASE_TYPE} \
            mysql -u${LD_DBUSER} -p${LD_DBPASS} ${DATABASE_NAME} "${@}"

    # tail laravel log
    elif [[ "${1}" == "tail" ]] || [[ "${1}" == "log" ]]; then
        shift 1
        COMMAND="tail ${@} storage/logs/laravel.log"
        ${COMPOSE} exec \
            workspace \
            bash -c "cd ${PROJECT}; ${COMMAND}"

    #########################
    ### utility functions ###
    #########################

    # restart containers
    elif [[ "${1}" == "restart" ]] || [[ "${1}" == "reboot" ]]; then
        ${COMPOSE} down && \
        ${COMPOSE} up -d ${CONTAINERS}

    # create database and nginx config for project
    elif [[ "${1}" == "setup" ]]; then
        # start all containers
        ${COMPOSE} up -d ${CONTAINERS}
        # create project database
        COMMAND="create database if not exists ${DATABASE_NAME};"
        ${COMPOSE} exec \
            ${DATABASE_TYPE} \
            mysql -u${LD_DBUSER} -p${LD_DBPASS} -e "${COMMAND}"
        # create project database user
        COMMAND="grant all privileges on ${DATABASE_NAME}.* to '${DATABASE_NAME}'@'%' identified by '${DATABASE_PASS}'; flush privileges;"
        ${COMPOSE} exec \
            ${DATABASE_TYPE} \
            mysql -u${LD_DBUSER} -p${LD_DBPASS} -e "${COMMAND}"
        # nginx config
        sed -e "s/laravel/${PROJECT}/g" "${LD_NGINX}/laravel.conf.example" > "${LD_NGINX}/${PROJECT}.conf"
        # stop all containers
        ${COMPOSE} down

    # rebuild / repair containers
    elif [[ "${1}" == "rebuild" ]] || [[ "${1}" == "repair" ]]; then
        ${COMPOSE} down && \
        ${COMPOSE} build --no-cache workspace ${CONTAINERS} && \
        ${COMPOSE} up -d ${CONTAINERS}

    # upgrade homeport
    elif [[ "${1}" == "upgrade" ]] || [[ "${1}" == "update" ]]; then
        cp "${CODE}/vendor/coroin/homeport/scripts/homeport" "${CODE}/"

    # display homeport version
    elif [[ "${1}" == "version" ]] || [[ "${1}" == "v" ]]; then
        echo "homeport version ${VERSION}"

    # run any valid docker command
    else
        ${COMPOSE} "${@}"
    fi
else
    ${COMPOSE} ps
fi
